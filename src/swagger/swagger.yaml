openapi: 3.0.0
info:
  title: Pick N Get Delivery API
  description: API documentation for Pick N Get delivery and rider management
  version: 1.0.0
servers:
  - url: https://pick-n-get-be.onrender.com
    description: Production server
  - url: http://localhost:5000
    description: Development server

components:
  schemas:
    Rider:
      type: object
      properties:
        id:
          type: number
        name:
          type: string
        phoneNumber:
          type: string
        vehicleNumber:
          type: string
        vehicleType:
          type: string
        country:
          type: string
        capacity:
          type: number
        image:
          type: string
        riderStatus:
          type: string
        approvalStatus:
          type: string

    PickUpDetails:
      type: object
      properties:
        itemId:
          type: number
        userId:
          type: number

    Error:
      type: object
      properties:
        status:
          type: string
          example: error
        message:
          type: string

    Success:
      type: object
      properties:
        message:
          type: string
        data:
          type: object

tags:
  - name: Riders
    description: Rider registration and management
  - name: Pickup
    description: Pickup and delivery operations

paths:
  /api/v1/riders:
    post:
      tags:
        - Riders
      summary: Register a new rider
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - id
                - name
                - phoneNumber
                - vehicleNumber
                - vehicleType
                - country
                - capacity
              properties:
                id:
                  type: number
                  example: 1
                name:
                  type: string
                  example: "John Doe"
                phoneNumber:
                  type: string
                  example: "+1234567890"
                vehicleNumber:
                  type: string
                  example: "ABC123"
                vehicleType:
                  type: string
                  example: "motorcycle"
                country:
                  type: string
                  example: "Nigeria"
                capacity:
                  type: number
                  example: 50
                image:
                  type: string
                  example: "https://example.com/image.jpg"
                riderStatus:
                  type: string
                  example: "available"
            approvalStatus:
              type: string
              example: "pending"
    responses:
      "201":
        description: Rider registered successfully
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Success"
      "400":
        description: Missing required fields or invalid data
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Error"
      "409":
        description: Rider already exists
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Error"
      "500":
        description: Internal server error
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Error"

    get:
      tags:
        - Riders
      summary: Get all riders
      responses:
        "200":
          description: Successfully retrieved all riders
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Rider"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /api/v1/riders/{riderId}:
    get:
      tags:
        - Riders
      summary: Get rider by ID
      parameters:
        - in: path
          name: riderId
          required: true
          schema:
            type: number
          example: 1
      responses:
        "200":
          description: Successfully retrieved rider
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Rider"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /api/v1/riders/{riderId}/approval:
    patch:
      tags:
        - Riders
      summary: Update rider approval status
      parameters:
        - in: path
          name: riderId
          required: true
          schema:
            type: number
          example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: string
              enum: [approve, reject]
              example: "approve"
      responses:
        "200":
          description: Rider approval status updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Success"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /api/v1/pick-ride/{user}/{item}:
    post:
      tags:
        - Pickup
      summary: Request a rider for pickup
      parameters:
        - in: path
          name: user
          required: true
          schema:
            type: number
          example: 1
        - in: path
          name: item
          required: true
          schema:
            type: number
          example: 123
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - type
                - country
                - address
                - picked
                - details
              properties:
                type:
                  type: string
                  example: "delivery"
                country:
                  type: string
                  example: "Nigeria"
                address:
                  type: string
                  example: "123 Main Street, Lagos"
                picked:
                  type: boolean
                  example: false
                details:
                  type: object
                  properties:
                    itemId:
                      type: number
                      example: 123
                    userId:
                      type: number
                      example: 1
      responses:
        "201":
          description: Rider assigned successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Rider assigned successfully"
                  data:
                    type: object
        "200":
          description: No riders available or rider busy
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        "400":
          description: Missing fields or unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "409":
          description: Pending pickup exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  pickUpStatus:
                    type: string
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /api/v1/validate-ride/{rider}/{pick-up-id}:
    post:
      tags:
        - Pickup
      summary: Validate a ride by rider
      parameters:
        - in: path
          name: rider
          required: true
          schema:
            type: number
          example: 1
        - in: path
          name: pick-up-id
          required: true
          schema:
            type: string
          example: "pickup123"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - validate
              properties:
                validate:
                  type: boolean
                  example: true
      responses:
        "200":
          description: Ride validated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Ride Validated"
                  data:
                    type: string
        "400":
          description: Missing validation option
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /api/v1/update-status/{rider}/{pick-up-id}:
    post:
      tags:
        - Pickup
      summary: Update pickup delivery status
      parameters:
        - in: path
          name: rider
          required: true
          schema:
            type: number
          example: 1
        - in: path
          name: pick-up-id
          required: true
          schema:
            type: string
          example: "pickup123"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - status
              properties:
                status:
                  type: string
                  example: "delivered"
      responses:
        "200":
          description: Status updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /api/v1/total-ride/{rider}:
    get:
      tags:
        - Pickup
      summary: Get all pickups by rider
      parameters:
        - in: path
          name: rider
          required: true
          schema:
            type: number
          example: 1
      responses:
        "200":
          description: Successfully retrieved rider pickups
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: object
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
